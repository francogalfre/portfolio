<button
  id="theme-toggle"
  class="p-2 rounded-md transition-colors duration-300
         text-black/60 dark:text-white/60 dark:hover:bg-black/30 hover:bg-slate-300"
  aria-label="Alternar modo oscuro/claro"
>
  <svg
    class="w-6 h-6 block dark:hidden"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    ></path>
  </svg>
  <svg
    class="w-6 h-6 hidden dark:block"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    ></path>
  </svg>
</button>

<script>
  // Script que se ejecuta en el cliente para manejar la lógica
  document.addEventListener("DOMContentLoaded", () => {
    const root = document.documentElement;
    const themeToggle = document.getElementById("theme-toggle");

    // Determina el tema inicial al cargar la página
    const currentTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    const initialTheme = currentTheme ?? (prefersDark ? "dark" : "light");

    if (initialTheme === "dark") {
      root.classList.add("dark");
    }

    // Escucha el clic para alternar el tema
    themeToggle?.addEventListener("click", () => {
      const isDark = root.classList.toggle("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
  });
</script>
